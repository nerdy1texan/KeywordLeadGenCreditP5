generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  password      String?
  image         String?
  accounts      Account[]
  sessions      Session[]
  userGroup     UserGroup?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  products      Product[]
}

model UserGroup {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @unique @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  groupId   String   @db.ObjectId
  group     Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
}

model Subscription {
  id                       String    @id @default(auto()) @map("_id") @db.ObjectId
  externalCustomerId       String
  status                   String
  externalSubscriptionId   String    @unique
  items                    String
  externalCurrentPeriodEnd DateTime?
  subscriberGroupId        String    @unique @db.ObjectId
  subscriberGroup          Group     @relation(fields: [subscriberGroupId], references: [id], onDelete: Cascade)
  createdAt                DateTime  @default(now())
  updatedAt                DateTime  @updatedAt
}

model Group {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  members      UserGroup[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  subscription Subscription?
}

model NewsletterSubscriber {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  active    Boolean  @default(false)
  email     String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model ActivationCode {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  code      String    @unique
  data      String?
  active    Boolean   @default(true)
  expires   DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Product {
  id                  String                @id @default(auto()) @map("_id") @db.ObjectId
  name                String
  url                 String?
  description         String
  keywords            String[]
  userId              String                @db.ObjectId
  user                User                  @relation(fields: [userId], references: [id])
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  monitoredSubreddits SubredditSuggestion[]
  redditPosts         RedditPost[]          @relation("ProductPosts")
  tweets              Tweet[]               @relation("ProductTweets")
  plans               Plan[]                @relation("ProductPlans")
}

model SubredditSuggestion {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  title          String
  description    String   @db.String
  memberCount    Int
  url            String
  relevanceScore Float    @default(0)
  matchReason    String?
  isMonitored    Boolean  @default(false)
  productId      String   @db.ObjectId
  product        Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([productId])
  @@unique([productId, name], name: "productId_name")
}

model RedditPost {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  redditId      String   @unique
  title         String   @db.String
  text          String   @db.String
  url           String
  subreddit     String
  author        String
  createdAt     DateTime
  productId     String   @db.ObjectId
  product       Product  @relation("ProductPosts", fields: [productId], references: [id])
  engagement    String   @default("unseen")
  fit           Int      @default(0)
  authenticity  Int      @default(0)
  lead          Int      @default(0)
  isFavorited   Boolean  @default(false)
  isReplied     Boolean  @default(false)
  latestReply   String?  @db.String

  @@index([productId])
}

// New model for product plans
model Plan {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  price       Float
  features    String[] // Array of features
  productId   String   @db.ObjectId
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade, name: "ProductPlans")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([productId])
}

model Tweet {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  twitterId      String   @unique
  text           String
  url            String
  author         String
  authorUsername String
  createdAt      DateTime
  productId      String   @db.ObjectId
  product        Product  @relation("ProductTweets", fields: [productId], references: [id])
  engagement     String   @default("unseen")
  fit           Float    @default(0)
  authenticity  Float    @default(0)
  lead          Float    @default(0)
  isFavorited   Boolean  @default(false)
  isReplied     Boolean  @default(false)
  latestReply   String?
  replyCount    Int      @default(0)
  retweetCount  Int      @default(0)
  likeCount     Int      @default(0)

  @@index([productId])
}